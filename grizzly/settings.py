"""
Django settings for grizzly project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

ALLOWED_HOSTS = ['*']
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = (
    '127.0.0.1',
    '127.0.0.1:8001',
    '127.0.0.1:8002',
    '127.0.0.1:8000',
    '127.0.0.1:8080',
    '127.0.0.1:8081',
    '127.0.0.1:8888',
    'localhost:8888',
    'localhost:8889',
    'localhost:8080',
    'localhost:8999',
)

if 'WHITELIST' in os.environ:
    whitelist = os.environ['WHITELIST']
    for host in whitelist.split(','):
        CORS_ORIGIN_WHITELIST += (host,)

DEFAULT_REQUEST_RATE_LIMIT = '1/30.minute'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_otp',
    'django_otp.plugins.otp_totp',
]

START_APPS = [
    'account',
    'loginsvc',
    'promotion',
    'envelope',
    'configsetting',
    'ticket',
]
INSTALLED_APPS += START_APPS

THIRD_PARTY_APPS = [
    'oauth2_provider',
    'django_extensions',
    'corsheaders',
    'rest_framework',
    'cms',
    'import_export',
    'captcha',
    'drf_yasg',
]
INSTALLED_APPS += THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'grizzly.urls'

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope'},
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,  # 1 hour
    'REFRESH_TOKEN_EXPIRE_SECONDS': 86400,  # 24 hour
    'OAUTH_DELETE_EXPIRED': True,
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'grizzly.utils.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'NON_FIELD_ERRORS_KEY': 'error_code'  # RESPONSE/ERROR RENDERING
}

WSGI_APPLICATION = 'grizzly.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'  # Always change this to set the log timestamps correctly

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

CELERY_RESULT_BACKEND = 'rpc://'
CELERY_TIMEZONE = TIME_ZONE

RABBITMQ_DEFAULT_USER = os.environ.get('RABBITMQ_DEFAULT_USER')
RABBITMQ_DEFAULT_PASS = os.environ.get('RABBITMQ_DEFAULT_PASS')
RABBITMQ_DEFAULT_VHOST = os.environ.get('RABBITMQ_DEFAULT_VHOST')
RABBITMQ_HOST = os.environ.get('RABBITMQ_HOST', 'rabbitmq')
# Adjust for Google Cloud SDK Image
BROKER_URL = (f'amqp://{RABBITMQ_DEFAULT_USER}:{RABBITMQ_DEFAULT_PASS}'
              f'@{RABBITMQ_HOST}:5672/{RABBITMQ_DEFAULT_VHOST}')
BROKER_HEARTBEAT = int(os.environ.get('RABBITMQ_HOST', 0))

LOGGING = {
           'version': 1,
           'disable_existing_loggers': False,
           'formatters': {
               'verbose': {
                   'format': '[%(asctime)s][%(name)s:%(lineno)s][%(levelname)s] %(message)s',
                   'datefmt': '%Y/%b/%d %H:%M:%S'
               },
               'colored': {'()': 'colorlog.ColoredFormatter',
                           'format': '[%(log_color)s%(asctime)s%(reset)s][%(name)s:%(lineno)s][%(log_color)s%(levelname)s%(reset)s] %(message)s',
                           'datefmt': '%Y/%b/%d %H:%M:%S',
                           'log_colors': {'DEBUG': 'cyan',
                                          'INFO': 'green',
                                          'WARNING': 'bold_yellow',
                                          'ERROR': 'red',
                                          'CRITICAL': 'red,bg_white'},
                           'secondary_log_colors': {},
                           'style': '%'},
           },
           'handlers': {
               'console': {
                   'level': 'DEBUG',
                   'class': 'logging.StreamHandler',
                   'formatter': 'colored'
               },
               'mail_admins': {
                   'level': 'ERROR',
                   'class': 'django.utils.log.AdminEmailHandler',
               },
           },
           'loggers': {
               'django': {
                   'handlers': ['console'],
                   'propagate': True,
               },
               'django.request': {
                   'handlers': ['mail_admins'],
                   'level': 'ERROR',
               },
           }
}
__app_logging = {'handlers': ['console', ],
                 'level': 'DEBUG',
                 'propagate': True}
for proj_app in START_APPS:
    LOGGING.get('loggers').update({proj_app: __app_logging})

CDN_HOSTNAME = os.environ.get('CDN_HOSTNAME', '')
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

if os.environ.get('ENV') == 'production':
    from .production_settings import *
elif os.environ.get('ENV') == 'test':
    from .test_settings import *
else:
    from .development_settings import *

# Google Cloud Environments
if os.environ.get('GAE_INSTANCE'):  # Google App Engine cloud deployment
    from .gae_settings import *

if os.environ.get('GKE'):
    from .gke_settings import *
